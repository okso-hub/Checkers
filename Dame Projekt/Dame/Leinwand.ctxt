#BlueJ class context
comment0.target=Leinwand
comment0.text=\n\ Leinwand\ ist\ eine\ Klasse,\ die\ einfache\ Zeichenoperationen\ auf\ einer\n\ leinwandartigen\ Zeichenfl\u00E4che\ erm\u00F6glicht.\n\ Sie\ ist\ eine\ vereinfachte\ Version\ der\ Klasse\ Canvas\ (englisch\ f\u00FCr\ \n\ Leinwand)\ des\ JDK\ und\ wurde\ speziell\ f\u00FCr\ das\ Projekt\ "Figuren"\n\ geschrieben.\n\ \n\n\ @author\:\ Bruce\ Quig\n\ @author\:\ Michael\ K\u00F6lling\ (mik)\n\ @author\:\ Axel\ Schmolitzky\n\ \n\ @author\:\ \u00C4nderungen\ von\n\ @Java-MS\ Groupies\n\ @hier\:\ Uwe\ Debacher\n\n\ @version\:\ 1.7\ (5.12.2003)\n
comment1.params=
comment1.target=Leinwand\ gibLeinwand()
comment1.text=\n\ Fabrikmethode,\ die\ eine\ Referenz\ auf\ das\ einzige\ Exemplar\n\ dieser\ Klasse\ zur\u00FCckliefert.\ Wenn\ es\ von\ einer\ Klasse\ nur\n\ genau\ ein\ Exemplar\ gibt,\ wird\ dieses\ als\ 'Singleton'\n\ bezeichnet.\n
comment10.params=fig
comment10.target=void\ fuellen(java.awt.Shape)
comment2.params=titel\ breite\ hoehe\ grundfarbe
comment2.target=Leinwand(java.lang.String,\ int,\ int,\ java.awt.Color)
comment2.text=\n\ Erzeuge\ eine\ Leinwand.\n\ @param\ titel\ \ Titel,\ der\ im\ Rahmen\ der\ Leinwand\ angezeigt\ wird\n\ @param\ breite\ \ die\ gew\u00FCnschte\ Breite\ der\ Leinwand\n\ @param\ hoehe\ \ die\ gew\u00FCnschte\ H\u00F6he\ der\ Leinwand\n\ @param\ grundfarbe\ die\ Hintergrundfarbe\ der\ Leinwand\n
comment3.params=sichtbar
comment3.target=void\ setzeSichtbarkeit(boolean)
comment3.text=\n\ Setze,\ ob\ diese\ Leinwand\ sichtbar\ sein\ soll\ oder\ nicht.\ Wenn\ die\n\ Leinwand\ sichtbar\ gemacht\ wird,\ wird\ ihr\ Fenster\ in\ den\n\ Vordergrund\ geholt.\ Diese\ Operation\ kann\ auch\ benutzt\ werden,\ um\ \n\ ein\ bereits\ sichtbares\ Leinwandfenster\ in\ den\ Vordergrund\ (vor\n\ andere\ Fenster)\ zu\ holen.\n\ @param\ sichtbar\ boolean\ f\u00FCr\ die\ gew\u00FCnschte\ Sichtbarkeit\:\ \n\ true\ f\u00FCr\ sichtbar,\ false\ f\u00FCr\ nicht\ sichtbar.\n
comment4.params=figur\ farbe\ shape
comment4.target=void\ zeichne(java.lang.Object,\ java.lang.String,\ java.awt.Shape)
comment4.text=\n\ Zeichne\ f\u00FCr\ das\ gegebene\ Figur-Objekt\ eine\ Java-Figur\ (einen\ Shape)\n\ auf\ die\ Leinwand.\n\ @param\ \ figur\ \ das\ Figur-Objekt,\ f\u00FCr\ das\ ein\ Shape\ gezeichnet\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ werden\ soll\n\ @param\ \ farbe\ \ die\ Farbe\ der\ Figur\n\ @param\ \ shape\ \ ein\ Objekt\ der\ Klasse\ Shape,\ das\ tats\u00E4chlich\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ gezeichnet\ wird\n
comment5.params=figur
comment5.target=void\ entferne(java.lang.Object)
comment5.text=\n\ Entferne\ die\ gegebene\ Figur\ von\ der\ Leinwand.\n\ @param\ \ figur\ \ die\ Figur,\ deren\ Shape\ entfernt\ werden\ soll\n
comment6.params=farbname
comment6.target=void\ setzeZeichenfarbe(java.lang.String)
comment6.text=\n\ Setze\ die\ Zeichenfarbe\ der\ Leinwand.\n\ @param\ \ farbname\ der\ Name\ der\ neuen\ Zeichenfarbe.\n
comment7.params=millisekunden
comment7.target=void\ warte(int)
comment7.text=\n\ Warte\ f\u00FCr\ die\ angegebenen\ Millisekunden.\n\ Mit\ dieser\ Operation\ wird\ eine\ Verz\u00F6gerung\ definiert,\ die\n\ f\u00FCr\ animierte\ Zeichnungen\ benutzt\ werden\ kann.\n\ @param\ \ millisekunden\ die\ zu\ wartenden\ Millisekunden\n
comment8.params=
comment8.target=void\ erneutZeichnen()
comment8.text=\n\ Zeichne\ erneut\ alle\ Figuren\ auf\ der\ Leinwand.\n
comment9.params=
comment9.target=void\ loeschen()
comment9.text=\n\ L\u00F6sche\ die\ gesamte\ Leinwand.\n
numComments=11
